{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to eln2.org Electrical Age 2.0, aka Eln2, is a new version of Electrical Age which is to be written for Minecraft 1.12+ as well as Vintage Story . Plans are for the mod to be at least to a playable Alpha state by Fall of 2020, with the work perhaps nearing completion by the end of 2021. These are rough guesses and are honestly pretty optimistic at best. For more information about development plans, please visit the eln2 organization on GitHub .","title":"Home"},{"location":"#welcome-to-eln2org","text":"Electrical Age 2.0, aka Eln2, is a new version of Electrical Age which is to be written for Minecraft 1.12+ as well as Vintage Story . Plans are for the mod to be at least to a playable Alpha state by Fall of 2020, with the work perhaps nearing completion by the end of 2021. These are rough guesses and are honestly pretty optimistic at best. For more information about development plans, please visit the eln2 organization on GitHub .","title":"Welcome to eln2.org"},{"location":"development/","text":"Eln 2 development Some tidbits about development. Licensing Eln2 is licensed under the MIT license. Models and artwork need to be under some creative commons license that allows modification and distribution with commercial use, such as this license . Language(s) Eln2 is to be entirely written in Kotlin , except for where it is not possible. Kotlin is very similar to Java and runs on the JVM (it's similar to how Scala works). Project Structure There are two repositories: * eln2 : This is all of the Eln2 code. * eln2-web : This is the website you are reading. Inside the eln2 repository, you will find multiple folders: * core - All of the core MNA, thermal, and shaft based simulation code. No Minecraft or VS code ends up here. * integration-mc<version> - Integration code that acts as a middleware between core and UMC and Forge. * integration-vs - Integration code that acts as middleware between core and the Vintage Story Modding API. * shared - Hopefully, some shared code that can be shared between different versions of the Minecraft Integration code. Inside the repositories, you will find a lot of org.eln2 repositories: In the integration-mc1-12 repository, one will find roughly the following: org.eln2 mc1.12 block : all regular minecrafty blocks (ores, ..) that are not TE's item : all items simplenode : all single block TE's sixnode : all sixnode (6 sides of a block) TE's multinode : all multi block TE's In the core folder, one will find roughly the following: org.eln2 math : all sorts of mathy stuff sim : all sorts of simulation code (mna, electrical, thermal) When you build Eln2, you will generally operate out of the Integration folder for the platform you are using, and that will load in the mod libraries and core . Here's a general overview of what the class heiarchy may look like: org.eln2 integration : Minecraft version specific code. Stored in /integration- project directory shared : Shared integration code between versions. Stored in /shared source code folder (maybe symlinked into project or something?) core : Eln2 core code, such as the MNA math : All sorts of mathy stuff data : Data structures, algs. serialization : All of our serialization code. sim : All sorts of sim code (mna, electrical, thermal, etc.) electrical.mna : The MNA code thermal : The thermal code Log collection server For Eln2 pre-alpha development, we will have a crash log handler. What will happen is if the game crashes, we will automatically take the log, and send it out to the development team to a server that can receive these logs and then we can process them. This will aid in development, and will likely be removed at the alpha stage unless we find it useful. At the pre-alpha stage, we will also send the UUID of players so that we know who had the bug. Phases Just a FYI, these will all be copied sooner or later to GitHub issues, so that it's easier to track progress. There will be a proper set of milestones for this on each of the relevant repositories. Phase 1: Modding Integration Core: [ ] MNA finished [ ] Centralized log collection server Minecraft: [ ] configure UniversalModLib [ ] config file disclaimer option (disables the mod unless the user agrees to not pester the devs before alpha) [ ] crash logger Vintage Story: [ ] Make build environment cross-platform with easy to use instructions [ ] config file disclaimer option (disables the mod unless the user agrees to not pester the devs before alpha) [ ] crash logger Verification: Core: [ ] works in TravisCI with unit tests possible [ ] Crash logs received from both platforms. Minecraft: [ ] running ./gradlew build in the main workspace will prepare libraries and compile our mod to a functional jar [ ] config option works Vintage Story: [ ] Somehow, build works? Ability to step the MNA from mod console may be sufficient testing. [ ] config option works Phase 2: SingleNode I say models and textures, but these are basic as almost all of these items will be removed/edited later. [ ] SingleCable: a current based uninsulated cable that connects similarly to RF pipes [ ] Electrical Sim [ ] Thermal Sim [ ] SingleSource: a simple voltage source block [ ] Electrical Sim [ ] SingleGround: a simple ground pin [ ] Electrical Sim [ ] CreativeHeater: a simple thermal cable heater [ ] Thermal Sim (creates heat at a predefined rate of energy) [ ] Inventory Texture [ ] Model [ ] Passive Cooler: a simple heatsink with no fan [ ] Thermal Sim [ ] Inventory Texture [ ] Model (use existing 1.7.10?) [ ] Active Cooler: an simple heatsink with a fan (12v, 24W) [ ] Electrical Sim [ ] Thermal Sim [ ] Inventory Texture [ ] Model (use existing 1.7.10?) [ ] SingleSwitch: a current based uninsulated throw switch [ ] Electrical Sim [ ] Thermal Sim (similar to a cable, except when open we may reduce the thermal transfer) [ ] SingleResistor: a basic capacitor [ ] Electrical Sim [ ] Thermal Sim [ ] SingleCapacitor: a simple capacitor [ ] Electrical Sim [ ] Thermal Sim? [ ] SingleInductor: a simple inductor [ ] Electrical Sim [ ] Thermal Sim? [ ] Basic 12v Battery [ ] Electrical Sim [ ] Thermal Sim [ ] Inventory Texture [ ] Model (use existing 1.7.10?) NOTE: Models are not a priority at this stage as most of the Single* items will be removed later. Validation [ ] Verify Electrical Sim works and that reasonable currents are being moved. Get Matrix Size to the user [ ] Verify Thermal Sim works and that heat transfers through items properly [ ] Verify that WAILA-style integrations work with other mods. [ ] Verify that Capacitors work as they should IRL [ ] Verify that Inductors work as they should IRL [ ] Verify that Batteries work as they should IRL Phase 3: MultiNode [ ] autominer [ ] solar panels Phase 4: SixNode [ ] \"New\" SixNode [ ] cables [ ] switches [ ] resistors [ ] inductors [ ] capacitors [ ] lamp sockets [ ] lamp supply [ ] Remove Single* or at least delist it (shadow registry) [ ] API v1.0 [ ] Some reasonable textures Phase 5: Alpha Release and debugging [ ] remove developer disclaimer config [ ] Initial rounds of bugfixing Phase 6: Machines and equipment In no particular order: [ ] mod integration [ ] pay back IR folks by making electric trains a bit more electric [ ] cantenaries (over track wires) [ ] oredict [ ] Machines [ ] crusher - 100v to 800v [ ] roller - 100v to 800v [ ] press - 100v to 400v [ ] air compressor - 12v to 400v [ ] saw - 12v to 200v [ ] experimental teleporter [ ] Pole update material: [ ] data cables, fiber (Sigbus, OC/CC) [ ] fiber box [ ] 200v, 480v? (lower wires) [ ] 16kV (standard height poles) [ ] 125kV power transmission (extra height poles and power transmission) [ ] 220kV power transmission (power transfer towers) [ ] Underground cable transmission [ ] manholes [ ] underground fiber [ ] fiber box [ ] <2kV cables/sigbus [ ] Ground transformer [ ] Shaft Networks: [ ] generator [ ] motor [ ] turbines [ ] clutch [ ] static shaft [ ] shaft machines [ ] crusher [ ] roller [ ] saw [ ] air compressor [ ] Steam and Oil Processing [ ] Oil fields [ ] Oil rigs (factorio-esque with diminishing returns) [ ] Oil Processing Tanks [ ] Biofuel Processing [ ] Solar Tower (generates steam from heat) [ ] Nuclear Reactor (generates hot coolant) [ ] Liquid Heat Exchangers (uses hot coolant and water to make steam and cold coolant) [ ] More efficient gas turbine operationv (~60% return in lost heat energy) [ ]Gas Heat Exchangers - uses exhaust from gas turbines to heat water to make steam [ ] Ore Processing [ ] Some kind of something","title":"Eln2 Developer Plans"},{"location":"development/#eln-2-development","text":"Some tidbits about development.","title":"Eln 2 development"},{"location":"development/#licensing","text":"Eln2 is licensed under the MIT license. Models and artwork need to be under some creative commons license that allows modification and distribution with commercial use, such as this license .","title":"Licensing"},{"location":"development/#languages","text":"Eln2 is to be entirely written in Kotlin , except for where it is not possible. Kotlin is very similar to Java and runs on the JVM (it's similar to how Scala works).","title":"Language(s)"},{"location":"development/#project-structure","text":"There are two repositories: * eln2 : This is all of the Eln2 code. * eln2-web : This is the website you are reading. Inside the eln2 repository, you will find multiple folders: * core - All of the core MNA, thermal, and shaft based simulation code. No Minecraft or VS code ends up here. * integration-mc<version> - Integration code that acts as a middleware between core and UMC and Forge. * integration-vs - Integration code that acts as middleware between core and the Vintage Story Modding API. * shared - Hopefully, some shared code that can be shared between different versions of the Minecraft Integration code. Inside the repositories, you will find a lot of org.eln2 repositories: In the integration-mc1-12 repository, one will find roughly the following: org.eln2 mc1.12 block : all regular minecrafty blocks (ores, ..) that are not TE's item : all items simplenode : all single block TE's sixnode : all sixnode (6 sides of a block) TE's multinode : all multi block TE's In the core folder, one will find roughly the following: org.eln2 math : all sorts of mathy stuff sim : all sorts of simulation code (mna, electrical, thermal) When you build Eln2, you will generally operate out of the Integration folder for the platform you are using, and that will load in the mod libraries and core . Here's a general overview of what the class heiarchy may look like: org.eln2 integration : Minecraft version specific code. Stored in /integration- project directory shared : Shared integration code between versions. Stored in /shared source code folder (maybe symlinked into project or something?) core : Eln2 core code, such as the MNA math : All sorts of mathy stuff data : Data structures, algs. serialization : All of our serialization code. sim : All sorts of sim code (mna, electrical, thermal, etc.) electrical.mna : The MNA code thermal : The thermal code","title":"Project Structure"},{"location":"development/#log-collection-server","text":"For Eln2 pre-alpha development, we will have a crash log handler. What will happen is if the game crashes, we will automatically take the log, and send it out to the development team to a server that can receive these logs and then we can process them. This will aid in development, and will likely be removed at the alpha stage unless we find it useful. At the pre-alpha stage, we will also send the UUID of players so that we know who had the bug.","title":"Log collection server"},{"location":"development/#phases","text":"Just a FYI, these will all be copied sooner or later to GitHub issues, so that it's easier to track progress. There will be a proper set of milestones for this on each of the relevant repositories.","title":"Phases"},{"location":"development/#phase-1-modding-integration","text":"Core: [ ] MNA finished [ ] Centralized log collection server Minecraft: [ ] configure UniversalModLib [ ] config file disclaimer option (disables the mod unless the user agrees to not pester the devs before alpha) [ ] crash logger Vintage Story: [ ] Make build environment cross-platform with easy to use instructions [ ] config file disclaimer option (disables the mod unless the user agrees to not pester the devs before alpha) [ ] crash logger","title":"Phase 1: Modding Integration"},{"location":"development/#verification","text":"Core: [ ] works in TravisCI with unit tests possible [ ] Crash logs received from both platforms. Minecraft: [ ] running ./gradlew build in the main workspace will prepare libraries and compile our mod to a functional jar [ ] config option works Vintage Story: [ ] Somehow, build works? Ability to step the MNA from mod console may be sufficient testing. [ ] config option works","title":"Verification:"},{"location":"development/#phase-2-singlenode","text":"I say models and textures, but these are basic as almost all of these items will be removed/edited later. [ ] SingleCable: a current based uninsulated cable that connects similarly to RF pipes [ ] Electrical Sim [ ] Thermal Sim [ ] SingleSource: a simple voltage source block [ ] Electrical Sim [ ] SingleGround: a simple ground pin [ ] Electrical Sim [ ] CreativeHeater: a simple thermal cable heater [ ] Thermal Sim (creates heat at a predefined rate of energy) [ ] Inventory Texture [ ] Model [ ] Passive Cooler: a simple heatsink with no fan [ ] Thermal Sim [ ] Inventory Texture [ ] Model (use existing 1.7.10?) [ ] Active Cooler: an simple heatsink with a fan (12v, 24W) [ ] Electrical Sim [ ] Thermal Sim [ ] Inventory Texture [ ] Model (use existing 1.7.10?) [ ] SingleSwitch: a current based uninsulated throw switch [ ] Electrical Sim [ ] Thermal Sim (similar to a cable, except when open we may reduce the thermal transfer) [ ] SingleResistor: a basic capacitor [ ] Electrical Sim [ ] Thermal Sim [ ] SingleCapacitor: a simple capacitor [ ] Electrical Sim [ ] Thermal Sim? [ ] SingleInductor: a simple inductor [ ] Electrical Sim [ ] Thermal Sim? [ ] Basic 12v Battery [ ] Electrical Sim [ ] Thermal Sim [ ] Inventory Texture [ ] Model (use existing 1.7.10?) NOTE: Models are not a priority at this stage as most of the Single* items will be removed later.","title":"Phase 2: SingleNode"},{"location":"development/#validation","text":"[ ] Verify Electrical Sim works and that reasonable currents are being moved. Get Matrix Size to the user [ ] Verify Thermal Sim works and that heat transfers through items properly [ ] Verify that WAILA-style integrations work with other mods. [ ] Verify that Capacitors work as they should IRL [ ] Verify that Inductors work as they should IRL [ ] Verify that Batteries work as they should IRL","title":"Validation"},{"location":"development/#phase-3-multinode","text":"[ ] autominer [ ] solar panels","title":"Phase 3: MultiNode"},{"location":"development/#phase-4-sixnode","text":"[ ] \"New\" SixNode [ ] cables [ ] switches [ ] resistors [ ] inductors [ ] capacitors [ ] lamp sockets [ ] lamp supply [ ] Remove Single* or at least delist it (shadow registry) [ ] API v1.0 [ ] Some reasonable textures","title":"Phase 4: SixNode"},{"location":"development/#phase-5-alpha-release-and-debugging","text":"[ ] remove developer disclaimer config [ ] Initial rounds of bugfixing","title":"Phase 5: Alpha Release and debugging"},{"location":"development/#phase-6-machines-and-equipment","text":"In no particular order: [ ] mod integration [ ] pay back IR folks by making electric trains a bit more electric [ ] cantenaries (over track wires) [ ] oredict [ ] Machines [ ] crusher - 100v to 800v [ ] roller - 100v to 800v [ ] press - 100v to 400v [ ] air compressor - 12v to 400v [ ] saw - 12v to 200v [ ] experimental teleporter [ ] Pole update material: [ ] data cables, fiber (Sigbus, OC/CC) [ ] fiber box [ ] 200v, 480v? (lower wires) [ ] 16kV (standard height poles) [ ] 125kV power transmission (extra height poles and power transmission) [ ] 220kV power transmission (power transfer towers) [ ] Underground cable transmission [ ] manholes [ ] underground fiber [ ] fiber box [ ] <2kV cables/sigbus [ ] Ground transformer [ ] Shaft Networks: [ ] generator [ ] motor [ ] turbines [ ] clutch [ ] static shaft [ ] shaft machines [ ] crusher [ ] roller [ ] saw [ ] air compressor [ ] Steam and Oil Processing [ ] Oil fields [ ] Oil rigs (factorio-esque with diminishing returns) [ ] Oil Processing Tanks [ ] Biofuel Processing [ ] Solar Tower (generates steam from heat) [ ] Nuclear Reactor (generates hot coolant) [ ] Liquid Heat Exchangers (uses hot coolant and water to make steam and cold coolant) [ ] More efficient gas turbine operationv (~60% return in lost heat energy) [ ]Gas Heat Exchangers - uses exhaust from gas turbines to heat water to make steam [ ] Ore Processing [ ] Some kind of something","title":"Phase 6: Machines and equipment"},{"location":"progress/","text":"Progress on Eln2 General progress information about Eln2 development can be found here. Week 15 (April 5 - April 11) Baughn helped us configure CI using GitHub actions and Caeleron worked on making our standardized tests meet those CI testing requirements. Baughn suggests we set up better tests which Grissess and jrddunbr will do. Baughn and jrddunbr set up the Discord chat on Eln to have new chat rooms for developers. jrddunbr updates the website as there is growing interest in doing Eln2 work. Website was not updated because website development tool was not cooperating. Week 13 - 14 (March 22 - April 4) We discovered Vintage Story is a thing and they have a much better modding API. Caeleron joins the dev team and focuses mostly on making Vintage Story moding work. cam72cam pushes a new UMC release that has a brand new Gradle deployment system that removes the need for special powershell/shell scripts to set up their environment. We have yet to integrate that into our codebase. Week 12 (Mar 15 - Mar 21) Baughn said he has free time coming up, and so we brought him up to speed some on how Eln2 development is going and how to contribute. He suggested we convert to a monorepo, and so we have prepared such a repository . We are still waiting to hear from Grissess and get a concensus on that decision before going with it. Grissess , Baughn , and jrddunbr determined that the repository will be MIT licensed, and we will aim for CC0 or share-alike (commercial friendly). This will be fine, because UMC is LGPLv2.1, which allows us to have a different license so long as we keep our UMC on GitHub basically. There are two scripts in the Integration part of the mod code that are from IR-Integration, and so we may need those few files cleared as MIT to call the whole repo MIT, but we can also just use a license header in those applicable files. Weeks 4-11 (Jan 18 - Mar 14) We were both really busy, and did not have time to develop code. :/ Week 3 (Jan 12 - Jan 18) Grissess works a lot on the MNA solver after jrddunbr tries to do some work but encounters some difficulty with configuring the datatypes efficiently. He also uses a similar methodology to the Falstad solver by having \"stamps\" that modify the matrix from the components. It's worth noting that the old MNA also had the concept of a stamp, and also had some matricies, but the names were a bit.. odd, and difficult to follow. jrddunbr writes a Falstad importer, which can ingest (basic) Falstad circuits and load them into the MNA for processing. Week 2 (Jan 5 - Jan 11) jrddunbr set up a Travis CI page to have a build test on our commits and PR's. Plans are to hopefully have a CD pipeline at some point. cam72cam got back to us about UMC, and we began working to determine how to make UMC generic enough that two completely different mods can use it. Quoting directly from cam72cam on the progress of UMC for newer versions: 1.14.4 still needs support for injecting or generating recipes. I need to work on that at some point or have you two [ jrddunbr and Grissess ] help I have no idea how any of the rendering will be able to be ported to 1.15.x jrddunbr set up the eln2.org website on GitHub Pages, after working with the DNS provider to determine why DNS was not propagating properly to some major resolvers. jrddunbr works on Kotlinizing the sim code Grissess works on figuring out the Gradle import code, turns out it's going to be more difficult than we thought. jrddunbr and Grissess work on determining how to use alternate MNA matrix math providers and make efficient wrappers around different math libraries for benchmarking. Week 1 (Jan 1 - Jan 4) Beginning of the revived Eln2 efforts. Developers are jrddunbr and Grissess On Jan 1, 2020, eln2.org was purchased. This allowed development using the org.eln2.* Java namespace to proceed without suddenly having the domain bought from under our feet. jrddunbr builds a new clean repo for eln2 dev, with just the old mods.eln.sim directory copied on top of a 1.12.2 Forge environment (refactored to org.eln2.sim ) and all Minecraft related methods (eg, NBT) deleted. Eln2 developers guide was created by jrddunbr cam72cam was contacted about Universal Mod Core UMC was selected because: It supports MC 1.12 It is actively developed and maintained It claims that it will support MC 1.14 and MC 1.15 in the near future, and has some decent work to show for it. Grissess and jrddunbr know the developer personally. Grissess worked for three days on figuring out why we were having Gradle issues with importing UMC, but was unable to determine a reliable solution. Builds often failed as below: FAILURE: Build failed with an exception. * What went wrong: Could not determine the dependencies of task ':UniversalModCore:compileJava'. > Could not resolve all task dependencies for configuration ':UniversalModCore:forgeGradleMc'. > Could not find net.minecraftforge:forgeBin:1.12.2-14.23.4.2705. Searched in the following locations: - https://minecraft.curseforge.com/api/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://minecraft.curseforge.com/api/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - https://files.minecraftforge.net/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://files.minecraftforge.net/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - https://repo.maven.apache.org/maven2/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://repo.maven.apache.org/maven2/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - https://libraries.minecraft.net/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://libraries.minecraft.net/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - file:/home/travis/.gradle/caches/minecraft/deobfedDeps/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - file:/home/travis/.gradle/caches/minecraft/deobfedDeps/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - file:/home/travis/.gradle/caches/minecraft/net/minecraftforge/forge/1.12.2-14.23.4.2705/snapshot/20171003/forgeBin-1.12.2-14.23.4.2705.jar - file:/home/travis/.gradle/caches/minecraft/net/minecraftforge/forge/1.12.2-14.23.4.2705/snapshot/20171003/forgeBin.jar Required by: project :UniversalModCore","title":"Eln2 Progress"},{"location":"progress/#progress-on-eln2","text":"General progress information about Eln2 development can be found here.","title":"Progress on Eln2"},{"location":"progress/#week-15-april-5-april-11","text":"Baughn helped us configure CI using GitHub actions and Caeleron worked on making our standardized tests meet those CI testing requirements. Baughn suggests we set up better tests which Grissess and jrddunbr will do. Baughn and jrddunbr set up the Discord chat on Eln to have new chat rooms for developers. jrddunbr updates the website as there is growing interest in doing Eln2 work. Website was not updated because website development tool was not cooperating.","title":"Week 15 (April 5 - April 11)"},{"location":"progress/#week-13-14-march-22-april-4","text":"We discovered Vintage Story is a thing and they have a much better modding API. Caeleron joins the dev team and focuses mostly on making Vintage Story moding work. cam72cam pushes a new UMC release that has a brand new Gradle deployment system that removes the need for special powershell/shell scripts to set up their environment. We have yet to integrate that into our codebase.","title":"Week 13 - 14 (March 22 - April 4)"},{"location":"progress/#week-12-mar-15-mar-21","text":"Baughn said he has free time coming up, and so we brought him up to speed some on how Eln2 development is going and how to contribute. He suggested we convert to a monorepo, and so we have prepared such a repository . We are still waiting to hear from Grissess and get a concensus on that decision before going with it. Grissess , Baughn , and jrddunbr determined that the repository will be MIT licensed, and we will aim for CC0 or share-alike (commercial friendly). This will be fine, because UMC is LGPLv2.1, which allows us to have a different license so long as we keep our UMC on GitHub basically. There are two scripts in the Integration part of the mod code that are from IR-Integration, and so we may need those few files cleared as MIT to call the whole repo MIT, but we can also just use a license header in those applicable files.","title":"Week 12 (Mar 15 - Mar 21)"},{"location":"progress/#weeks-4-11-jan-18-mar-14","text":"We were both really busy, and did not have time to develop code. :/","title":"Weeks 4-11 (Jan 18 - Mar 14)"},{"location":"progress/#week-3-jan-12-jan-18","text":"Grissess works a lot on the MNA solver after jrddunbr tries to do some work but encounters some difficulty with configuring the datatypes efficiently. He also uses a similar methodology to the Falstad solver by having \"stamps\" that modify the matrix from the components. It's worth noting that the old MNA also had the concept of a stamp, and also had some matricies, but the names were a bit.. odd, and difficult to follow. jrddunbr writes a Falstad importer, which can ingest (basic) Falstad circuits and load them into the MNA for processing.","title":"Week 3 (Jan 12 - Jan 18)"},{"location":"progress/#week-2-jan-5-jan-11","text":"jrddunbr set up a Travis CI page to have a build test on our commits and PR's. Plans are to hopefully have a CD pipeline at some point. cam72cam got back to us about UMC, and we began working to determine how to make UMC generic enough that two completely different mods can use it. Quoting directly from cam72cam on the progress of UMC for newer versions: 1.14.4 still needs support for injecting or generating recipes. I need to work on that at some point or have you two [ jrddunbr and Grissess ] help I have no idea how any of the rendering will be able to be ported to 1.15.x jrddunbr set up the eln2.org website on GitHub Pages, after working with the DNS provider to determine why DNS was not propagating properly to some major resolvers. jrddunbr works on Kotlinizing the sim code Grissess works on figuring out the Gradle import code, turns out it's going to be more difficult than we thought. jrddunbr and Grissess work on determining how to use alternate MNA matrix math providers and make efficient wrappers around different math libraries for benchmarking.","title":"Week 2 (Jan 5 - Jan 11)"},{"location":"progress/#week-1-jan-1-jan-4","text":"Beginning of the revived Eln2 efforts. Developers are jrddunbr and Grissess On Jan 1, 2020, eln2.org was purchased. This allowed development using the org.eln2.* Java namespace to proceed without suddenly having the domain bought from under our feet. jrddunbr builds a new clean repo for eln2 dev, with just the old mods.eln.sim directory copied on top of a 1.12.2 Forge environment (refactored to org.eln2.sim ) and all Minecraft related methods (eg, NBT) deleted. Eln2 developers guide was created by jrddunbr cam72cam was contacted about Universal Mod Core UMC was selected because: It supports MC 1.12 It is actively developed and maintained It claims that it will support MC 1.14 and MC 1.15 in the near future, and has some decent work to show for it. Grissess and jrddunbr know the developer personally. Grissess worked for three days on figuring out why we were having Gradle issues with importing UMC, but was unable to determine a reliable solution. Builds often failed as below: FAILURE: Build failed with an exception. * What went wrong: Could not determine the dependencies of task ':UniversalModCore:compileJava'. > Could not resolve all task dependencies for configuration ':UniversalModCore:forgeGradleMc'. > Could not find net.minecraftforge:forgeBin:1.12.2-14.23.4.2705. Searched in the following locations: - https://minecraft.curseforge.com/api/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://minecraft.curseforge.com/api/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - https://files.minecraftforge.net/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://files.minecraftforge.net/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - https://repo.maven.apache.org/maven2/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://repo.maven.apache.org/maven2/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - https://libraries.minecraft.net/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://libraries.minecraft.net/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - file:/home/travis/.gradle/caches/minecraft/deobfedDeps/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - file:/home/travis/.gradle/caches/minecraft/deobfedDeps/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - file:/home/travis/.gradle/caches/minecraft/net/minecraftforge/forge/1.12.2-14.23.4.2705/snapshot/20171003/forgeBin-1.12.2-14.23.4.2705.jar - file:/home/travis/.gradle/caches/minecraft/net/minecraftforge/forge/1.12.2-14.23.4.2705/snapshot/20171003/forgeBin.jar Required by: project :UniversalModCore","title":"Week 1 (Jan 1 - Jan 4)"}]}