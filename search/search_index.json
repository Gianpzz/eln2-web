{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to eln2.org Electrical Age 2.0, aka Eln2, is a new version of Electrical Age which is to be written for 1.12. Plans are for the mod to be at least to a playable Alpha state by Summer of 2020, with the work perhaps nearing completion by the end of 2020. These are rough guesses and are honestly pretty optimistic at best. For more information about development plans, please visit the eln2 repository .","title":"Home"},{"location":"#welcome-to-eln2org","text":"Electrical Age 2.0, aka Eln2, is a new version of Electrical Age which is to be written for 1.12. Plans are for the mod to be at least to a playable Alpha state by Summer of 2020, with the work perhaps nearing completion by the end of 2020. These are rough guesses and are honestly pretty optimistic at best. For more information about development plans, please visit the eln2 repository .","title":"Welcome to eln2.org"},{"location":"development/","text":"Eln 2 development Some tidbits about development. Licensing Right now Grissess and jrddunbr have basically written the mod from scratch. The current suggestion is to be alright with anything from MIT license up to the old Eln license, but likely we will LGPLv2+ unless we see reason to license it otherwise. Models and artwork need to be under some creative commons license that allows modification and distribution. Language(s) Eln2 is to be written in entirely Kotlin , except for where it is not possible. Tutorials on Kotlin can be found online if you are familiar with Java. It is not too much different, but if you don't know what a functional programming language is, I'd suggest reading at least part of this book ( amazon ) before starting development. Things like this: val fruits = [\"bananas\", \"oranges\", \"apples\"] val fruits2 = fruits.filter{\"e\" in it}.map{it.toUpperCase()} fruits2.forEach{println(it)} will possibly make a lot more sense after reading that book. Project Structure There are multiple repositories: * electrical-age-1.12 : The actual Minecraft part of Electrical Age 2, written for MC 1.12 * eln2-core : The core code of Eln2. This code is intended to be 100% portable between MC versions. * eln2-web : This is the website you are reading. Inside the repositories, you will find a lot of org.eln2 repositories: In the electrical-age-1.12 repository, one will find roughly the following: org.eln2 mc1.12 block : all regular minecrafty blocks (ores, ..) that are not TE's item : all items simplenode : all single block TE's sixnode : all sixnode (6 sides of a block) TE's multinode : all multi block TE's In the eln2-core repository, one will find roughly the following: org.eln2 math : all sorts of mathy stuff sim : all sorts of simulation code (mna, electrical, thermal) When you build Eln2, you will generally operate out of the electrical-age-1.12 folder, and that will load in UMC as well as Eln2-core. As a result, all of those imports will be accessible to be used for Minecraft code. At some point, I want to move these repositories to https://github.com/eln2 , namely, we would probably call them eln2-mc-integration , eln2-core , and eln2-web at that organization. The different versions of the eln2 Minecraft integrations (say 1.12, 1.14, 1.15, etc) would be branches by those names on that repository, which matches the way that UMC is structured. Log collection server For Eln2 pre-alpha development, we will have a crash log handler. What will happen is if the game crashes, we will automatically take the log, and send it out to the development team to a server that can recieve these logs and then we can process them. This will aid in development, and will likely be removed at the alpha stage unless we find it useful. At the pre-alpha stage, we will also send the UUID of players to be sent back as well so that we know who had the bug. Phases Just a FYI, these will all be copied sooner or later to GitHub issues, so that it's easier to track progress. Phase 1: UniversalModLib [ ] configure UniversalModLib [ ] fix UniiversalModLib [ ] package UniversalModLib [ ] config file disclaimer option (disables the mod unless the user agrees to not pester the devs before alpha) [ ] crash logger [ ] rebuild MNA from scratch (apparently) Verification: [ ] running ./gradlew build in the main workspace will prepare libraries and compile our mod to a functional jar [ ] works in TravisCI [ ] config option works Phase 2: SingleNode I say models and textures, but these are basic as almost all of these items will be removed/edited later. [ ] SingleCable: a current based uninsulated cable that connects similarly to RF pipes [ ] Electrical Sim [ ] Thermal Sim [ ] SingleSource: a simple voltage source block [ ] Electrical Sim [ ] SingleGround: a simple ground pin [ ] Electrical Sim [ ] CreativeHeater: a simple thermal cable heater [ ] Thermal Sim (creates heat at a predefined rate of energy) [ ] Inventory Texture [ ] Model [ ] Passive Cooler: a simple heatsink with no fan [ ] Thermal Sim [ ] Inventory Texture [ ] Model (use existing 1.7.10?) [ ] Active Cooler: an simple heatsink with a fan (12v, 24W) [ ] Electrical Sim [ ] Thermal Sim [ ] Inventory Texture [ ] Model (use existing 1.7.10?) [ ] SingleSwitch: a current based uninsulated throw switch [ ] Electrical Sim [ ] Thermal Sim (similar to a cable, except when open we may reduce the thermal transfer) [ ] SingleResistor: a basic capacitor [ ] Electrical Sim [ ] Thermal Sim [ ] SingleCapacitor: a simple capacitor [ ] Electrical Sim [ ] Thermal Sim? [ ] SingleInductor: a simple inductor [ ] Electrical Sim [ ] Thermal Sim? [ ] Basic 12v Battery [ ] Electrical Sim [ ] Thermal Sim [ ] Inventory Texture [ ] Model (use existing 1.7.10?) NOTE: Models are not a priority at this stage as most of the Single* items will be removed later. Validation [ ] Verify Electrical Sim works and that reasonable currents are being moved. Get Matrix Size to the user [ ] Verify Thermal Sim works and that heat transfers through items properly [ ] Verify that WAILA-style integrations work with other mods. [ ] Verify that Capacitors work as they should IRL [ ] Verify that Inductors work as they should IRL [ ] Verify that Batteries work as they should IRL Phase 3: MultiNode [ ] autominer [ ] solar panels Phase 4: SixNode [ ] \"New\" SixNode [ ] cables [ ] switches [ ] resistors [ ] inductors [ ] capacitors [ ] lamp sockets [ ] lamp supply [ ] Remove Single* or at least delist it (shadow registry) [ ] API v1.0 [ ] Some reasonable textures Phase 5: Alpha Release and debugging [ ] remove developer disclaimer config [ ] Initial rounds of bugfixing Phase 6: Machines and equipment In no particular order: [ ] mod integration [ ] pay back IR folks by making electric trains a bit more electric [ ] cantenaries (over track wires) [ ] oredict [ ] Machines [ ] crusher - 100v to 800v [ ] roller - 100v to 800v [ ] press - 100v to 400v [ ] air compressor - 12v to 400v [ ] saw - 12v to 200v [ ] experimental teleporter [ ] Pole update material: [ ] data cables, fiber (Sigbus, OC/CC) [ ] fiber box [ ] 200v, 480v? (lower wires) [ ] 16kV (standard height poles) [ ] 125kV power transmission (extra height poles and power transmission) [ ] 220kV power transmission (power transfer towers) [ ] Underground cable transmission [ ] manholes [ ] underground fiber [ ] fiber box [ ] <2kV cables/sigbus [ ] Ground transformer [ ] Shaft Networks: [ ] generator [ ] motor [ ] turbines [ ] clutch [ ] static shaft [ ] shaft machines [ ] crusher [ ] roller [ ] saw [ ] air compressor [ ] Steam and Oil Processing [ ] Oil fields [ ] Oil rigs (factorio-esque with diminishing returns) [ ] Oil Processing Tanks [ ] Biofuel Processing [ ] Solar Tower (generates steam from heat) [ ] Nuclear Reactor (generates hot coolant) [ ] Liquid Heat Exchangers (uses hot coolant and water to make steam and cold coolant) [ ] More efficient gas turbine operationv (~60% return in lost heat energy) [ ]Gas Heat Exchangers - uses exhaust from gas turbines to heat water to make steam [ ] Ore Processing [ ] Some kind of something","title":"Eln2 Developer Plans"},{"location":"development/#eln-2-development","text":"Some tidbits about development.","title":"Eln 2 development"},{"location":"development/#licensing","text":"Right now Grissess and jrddunbr have basically written the mod from scratch. The current suggestion is to be alright with anything from MIT license up to the old Eln license, but likely we will LGPLv2+ unless we see reason to license it otherwise. Models and artwork need to be under some creative commons license that allows modification and distribution.","title":"Licensing"},{"location":"development/#languages","text":"Eln2 is to be written in entirely Kotlin , except for where it is not possible. Tutorials on Kotlin can be found online if you are familiar with Java. It is not too much different, but if you don't know what a functional programming language is, I'd suggest reading at least part of this book ( amazon ) before starting development. Things like this: val fruits = [\"bananas\", \"oranges\", \"apples\"] val fruits2 = fruits.filter{\"e\" in it}.map{it.toUpperCase()} fruits2.forEach{println(it)} will possibly make a lot more sense after reading that book.","title":"Language(s)"},{"location":"development/#project-structure","text":"There are multiple repositories: * electrical-age-1.12 : The actual Minecraft part of Electrical Age 2, written for MC 1.12 * eln2-core : The core code of Eln2. This code is intended to be 100% portable between MC versions. * eln2-web : This is the website you are reading. Inside the repositories, you will find a lot of org.eln2 repositories: In the electrical-age-1.12 repository, one will find roughly the following: org.eln2 mc1.12 block : all regular minecrafty blocks (ores, ..) that are not TE's item : all items simplenode : all single block TE's sixnode : all sixnode (6 sides of a block) TE's multinode : all multi block TE's In the eln2-core repository, one will find roughly the following: org.eln2 math : all sorts of mathy stuff sim : all sorts of simulation code (mna, electrical, thermal) When you build Eln2, you will generally operate out of the electrical-age-1.12 folder, and that will load in UMC as well as Eln2-core. As a result, all of those imports will be accessible to be used for Minecraft code. At some point, I want to move these repositories to https://github.com/eln2 , namely, we would probably call them eln2-mc-integration , eln2-core , and eln2-web at that organization. The different versions of the eln2 Minecraft integrations (say 1.12, 1.14, 1.15, etc) would be branches by those names on that repository, which matches the way that UMC is structured.","title":"Project Structure"},{"location":"development/#log-collection-server","text":"For Eln2 pre-alpha development, we will have a crash log handler. What will happen is if the game crashes, we will automatically take the log, and send it out to the development team to a server that can recieve these logs and then we can process them. This will aid in development, and will likely be removed at the alpha stage unless we find it useful. At the pre-alpha stage, we will also send the UUID of players to be sent back as well so that we know who had the bug.","title":"Log collection server"},{"location":"development/#phases","text":"Just a FYI, these will all be copied sooner or later to GitHub issues, so that it's easier to track progress.","title":"Phases"},{"location":"development/#phase-1-universalmodlib","text":"[ ] configure UniversalModLib [ ] fix UniiversalModLib [ ] package UniversalModLib [ ] config file disclaimer option (disables the mod unless the user agrees to not pester the devs before alpha) [ ] crash logger [ ] rebuild MNA from scratch (apparently)","title":"Phase 1: UniversalModLib"},{"location":"development/#verification","text":"[ ] running ./gradlew build in the main workspace will prepare libraries and compile our mod to a functional jar [ ] works in TravisCI [ ] config option works","title":"Verification:"},{"location":"development/#phase-2-singlenode","text":"I say models and textures, but these are basic as almost all of these items will be removed/edited later. [ ] SingleCable: a current based uninsulated cable that connects similarly to RF pipes [ ] Electrical Sim [ ] Thermal Sim [ ] SingleSource: a simple voltage source block [ ] Electrical Sim [ ] SingleGround: a simple ground pin [ ] Electrical Sim [ ] CreativeHeater: a simple thermal cable heater [ ] Thermal Sim (creates heat at a predefined rate of energy) [ ] Inventory Texture [ ] Model [ ] Passive Cooler: a simple heatsink with no fan [ ] Thermal Sim [ ] Inventory Texture [ ] Model (use existing 1.7.10?) [ ] Active Cooler: an simple heatsink with a fan (12v, 24W) [ ] Electrical Sim [ ] Thermal Sim [ ] Inventory Texture [ ] Model (use existing 1.7.10?) [ ] SingleSwitch: a current based uninsulated throw switch [ ] Electrical Sim [ ] Thermal Sim (similar to a cable, except when open we may reduce the thermal transfer) [ ] SingleResistor: a basic capacitor [ ] Electrical Sim [ ] Thermal Sim [ ] SingleCapacitor: a simple capacitor [ ] Electrical Sim [ ] Thermal Sim? [ ] SingleInductor: a simple inductor [ ] Electrical Sim [ ] Thermal Sim? [ ] Basic 12v Battery [ ] Electrical Sim [ ] Thermal Sim [ ] Inventory Texture [ ] Model (use existing 1.7.10?) NOTE: Models are not a priority at this stage as most of the Single* items will be removed later.","title":"Phase 2: SingleNode"},{"location":"development/#validation","text":"[ ] Verify Electrical Sim works and that reasonable currents are being moved. Get Matrix Size to the user [ ] Verify Thermal Sim works and that heat transfers through items properly [ ] Verify that WAILA-style integrations work with other mods. [ ] Verify that Capacitors work as they should IRL [ ] Verify that Inductors work as they should IRL [ ] Verify that Batteries work as they should IRL","title":"Validation"},{"location":"development/#phase-3-multinode","text":"[ ] autominer [ ] solar panels","title":"Phase 3: MultiNode"},{"location":"development/#phase-4-sixnode","text":"[ ] \"New\" SixNode [ ] cables [ ] switches [ ] resistors [ ] inductors [ ] capacitors [ ] lamp sockets [ ] lamp supply [ ] Remove Single* or at least delist it (shadow registry) [ ] API v1.0 [ ] Some reasonable textures","title":"Phase 4: SixNode"},{"location":"development/#phase-5-alpha-release-and-debugging","text":"[ ] remove developer disclaimer config [ ] Initial rounds of bugfixing","title":"Phase 5: Alpha Release and debugging"},{"location":"development/#phase-6-machines-and-equipment","text":"In no particular order: [ ] mod integration [ ] pay back IR folks by making electric trains a bit more electric [ ] cantenaries (over track wires) [ ] oredict [ ] Machines [ ] crusher - 100v to 800v [ ] roller - 100v to 800v [ ] press - 100v to 400v [ ] air compressor - 12v to 400v [ ] saw - 12v to 200v [ ] experimental teleporter [ ] Pole update material: [ ] data cables, fiber (Sigbus, OC/CC) [ ] fiber box [ ] 200v, 480v? (lower wires) [ ] 16kV (standard height poles) [ ] 125kV power transmission (extra height poles and power transmission) [ ] 220kV power transmission (power transfer towers) [ ] Underground cable transmission [ ] manholes [ ] underground fiber [ ] fiber box [ ] <2kV cables/sigbus [ ] Ground transformer [ ] Shaft Networks: [ ] generator [ ] motor [ ] turbines [ ] clutch [ ] static shaft [ ] shaft machines [ ] crusher [ ] roller [ ] saw [ ] air compressor [ ] Steam and Oil Processing [ ] Oil fields [ ] Oil rigs (factorio-esque with diminishing returns) [ ] Oil Processing Tanks [ ] Biofuel Processing [ ] Solar Tower (generates steam from heat) [ ] Nuclear Reactor (generates hot coolant) [ ] Liquid Heat Exchangers (uses hot coolant and water to make steam and cold coolant) [ ] More efficient gas turbine operationv (~60% return in lost heat energy) [ ]Gas Heat Exchangers - uses exhaust from gas turbines to heat water to make steam [ ] Ore Processing [ ] Some kind of something","title":"Phase 6: Machines and equipment"},{"location":"progress/","text":"Progress on Eln2 General progress information about Eln2 development can be found here. Week 3 (Jan 12 - Jan 18) Grissess works a lot on the MNA solver after jrddunbr tries to do some work but encounters some difficulty with configuring the datatypes efficiently. He also uses a similar methodology to the Falstad solver by having \"stamps\" that modify the matrix from the components. It's worth noting that the old MNA also had the concept of a stamp, and also had some matricies, but the names were a bit.. odd, and difficult to follow. jrddunbr writes a Falstad importer, which can ingest (basic) Falstad circuits and load them into the MNA for processing. Week 2 (Jan 5 - Jan 11) jrddunbr set up a Travis CI page to have a build test on our commits and PR's. Plans are to hopefully have a CD pipeline at some point. cam72cam got back to us about UMC, and we began working to determine how to make UMC generic enough that two completely different mods can use it. Quoting directly from cam72cam on the progress of UMC for newer versions: 1.14.4 still needs support for injecting or generating recipes. I need to work on that at some point or have you two [ jrddunbr and Grissess ] help I have no idea how any of the rendering will be able to be ported to 1.15.x jrddunbr set up the eln2.org website on GitHub Pages, after working with the DNS provider to determine why DNS was not propagating properly to some major resolvers. jrddunbr works on Kotlinizing the sim code Grissess works on figuring out the Gradle import code, turns out it's going to be more difficult than we thought. jrddunbr and Grissess work on determining how to use alternate MNA matrix math providers and make efficient wrappers around different math libraries for benchmarking. Week 1 (Jan 1 - Jan 4) Beginning of the revived Eln2 efforts. Developers are jrddunbr and Grissess On Jan 1, 2020, eln2.org was purchased. This allowed development using the org.eln2.* Java namespace to proceed without suddenly having the domain bought from under our feet. jrddunbr builds a new clean repo for eln2 dev, with just the old mods.eln.sim directory copied on top of a 1.12.2 Forge environment (refactored to org.eln2.sim ) and all Minecraft related methods (eg, NBT) deleted. Eln2 developers guide was created by jrddunbr cam72cam was contacted about Universal Mod Core UMC was selected because: It supports MC 1.12 It is actively developed and maintained It claims that it will support MC 1.14 and MC 1.15 in the near future, and has some decent work to show for it. Grissess and jrddunbr know the developer personally. Grissess worked for three days on figuring out why we were having Gradle issues with importing UMC, but was unable to determine a reliable solution. Builds often failed as below: FAILURE: Build failed with an exception. * What went wrong: Could not determine the dependencies of task ':UniversalModCore:compileJava'. > Could not resolve all task dependencies for configuration ':UniversalModCore:forgeGradleMc'. > Could not find net.minecraftforge:forgeBin:1.12.2-14.23.4.2705. Searched in the following locations: - https://minecraft.curseforge.com/api/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://minecraft.curseforge.com/api/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - https://files.minecraftforge.net/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://files.minecraftforge.net/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - https://repo.maven.apache.org/maven2/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://repo.maven.apache.org/maven2/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - https://libraries.minecraft.net/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://libraries.minecraft.net/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - file:/home/travis/.gradle/caches/minecraft/deobfedDeps/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - file:/home/travis/.gradle/caches/minecraft/deobfedDeps/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - file:/home/travis/.gradle/caches/minecraft/net/minecraftforge/forge/1.12.2-14.23.4.2705/snapshot/20171003/forgeBin-1.12.2-14.23.4.2705.jar - file:/home/travis/.gradle/caches/minecraft/net/minecraftforge/forge/1.12.2-14.23.4.2705/snapshot/20171003/forgeBin.jar Required by: project :UniversalModCore","title":"Eln2 Progress"},{"location":"progress/#progress-on-eln2","text":"General progress information about Eln2 development can be found here.","title":"Progress on Eln2"},{"location":"progress/#week-3-jan-12-jan-18","text":"Grissess works a lot on the MNA solver after jrddunbr tries to do some work but encounters some difficulty with configuring the datatypes efficiently. He also uses a similar methodology to the Falstad solver by having \"stamps\" that modify the matrix from the components. It's worth noting that the old MNA also had the concept of a stamp, and also had some matricies, but the names were a bit.. odd, and difficult to follow. jrddunbr writes a Falstad importer, which can ingest (basic) Falstad circuits and load them into the MNA for processing.","title":"Week 3 (Jan 12 - Jan 18)"},{"location":"progress/#week-2-jan-5-jan-11","text":"jrddunbr set up a Travis CI page to have a build test on our commits and PR's. Plans are to hopefully have a CD pipeline at some point. cam72cam got back to us about UMC, and we began working to determine how to make UMC generic enough that two completely different mods can use it. Quoting directly from cam72cam on the progress of UMC for newer versions: 1.14.4 still needs support for injecting or generating recipes. I need to work on that at some point or have you two [ jrddunbr and Grissess ] help I have no idea how any of the rendering will be able to be ported to 1.15.x jrddunbr set up the eln2.org website on GitHub Pages, after working with the DNS provider to determine why DNS was not propagating properly to some major resolvers. jrddunbr works on Kotlinizing the sim code Grissess works on figuring out the Gradle import code, turns out it's going to be more difficult than we thought. jrddunbr and Grissess work on determining how to use alternate MNA matrix math providers and make efficient wrappers around different math libraries for benchmarking.","title":"Week 2 (Jan 5 - Jan 11)"},{"location":"progress/#week-1-jan-1-jan-4","text":"Beginning of the revived Eln2 efforts. Developers are jrddunbr and Grissess On Jan 1, 2020, eln2.org was purchased. This allowed development using the org.eln2.* Java namespace to proceed without suddenly having the domain bought from under our feet. jrddunbr builds a new clean repo for eln2 dev, with just the old mods.eln.sim directory copied on top of a 1.12.2 Forge environment (refactored to org.eln2.sim ) and all Minecraft related methods (eg, NBT) deleted. Eln2 developers guide was created by jrddunbr cam72cam was contacted about Universal Mod Core UMC was selected because: It supports MC 1.12 It is actively developed and maintained It claims that it will support MC 1.14 and MC 1.15 in the near future, and has some decent work to show for it. Grissess and jrddunbr know the developer personally. Grissess worked for three days on figuring out why we were having Gradle issues with importing UMC, but was unable to determine a reliable solution. Builds often failed as below: FAILURE: Build failed with an exception. * What went wrong: Could not determine the dependencies of task ':UniversalModCore:compileJava'. > Could not resolve all task dependencies for configuration ':UniversalModCore:forgeGradleMc'. > Could not find net.minecraftforge:forgeBin:1.12.2-14.23.4.2705. Searched in the following locations: - https://minecraft.curseforge.com/api/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://minecraft.curseforge.com/api/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - https://files.minecraftforge.net/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://files.minecraftforge.net/maven/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - https://repo.maven.apache.org/maven2/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://repo.maven.apache.org/maven2/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - https://libraries.minecraft.net/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - https://libraries.minecraft.net/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - file:/home/travis/.gradle/caches/minecraft/deobfedDeps/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.pom - file:/home/travis/.gradle/caches/minecraft/deobfedDeps/net/minecraftforge/forgeBin/1.12.2-14.23.4.2705/forgeBin-1.12.2-14.23.4.2705.jar - file:/home/travis/.gradle/caches/minecraft/net/minecraftforge/forge/1.12.2-14.23.4.2705/snapshot/20171003/forgeBin-1.12.2-14.23.4.2705.jar - file:/home/travis/.gradle/caches/minecraft/net/minecraftforge/forge/1.12.2-14.23.4.2705/snapshot/20171003/forgeBin.jar Required by: project :UniversalModCore","title":"Week 1 (Jan 1 - Jan 4)"}]}